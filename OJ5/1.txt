#include<iostream>
#include<string>
#include<sstream>
#include<vector>
#include<queue>
#include<algorithm>

using namespace std;

struct edge {
	int u, v;
	long long w;
	edge(int _u, int _v, long long _w = -1) {
		u = _u; 
		v = _v;
		w = _w;
	}
	bool operator<(const edge& e)const {
		return this->w < e.w;
	}
	bool operator>(const edge& e) const {
		return this->w > e.w;
	}
};

long long w_sum;
int tree_edge_num;
int n;
int* u; /*u is union set*/
//priority_queue<edge, vector<edge>, greater<edge>> q;
vector<edge> a;
/*
because edge_num is not large, we choose Kruskal Algorithm.
*/

int FIND(int a) {
	if (u[a] != a) {
		u[a] = FIND(u[a]);
		return u[a];
	}
	return a;
}

void UNION(int a, int b) {
	int fa = FIND(a), fb = FIND(b);
	if (fa != fb)
		u[fa] = fb;
	return;
}

/*void Kruskal(){
	while (!q.empty()) {
		edge e = q.top();
		q.pop();
		
		if (FIND(e.u) != FIND(e.v)) {
			//printf("add: %d-%d, w = %d\n", e.u, e.v, e.w);
			w_sum += e.w;
			tree_edge_num++;
			if (tree_edge_num == n - 1)
				return;
			UNION(e.u, e.v);
		}
	}
}*/

void Kruskal() {
	for (int i = 0; i < a.size(); i++) {
		edge e = a[i];
		if (FIND(e.u) != FIND(e.v)) {
			//printf("add: %d-%d, w = %d\n", e.u, e.v, e.w);
			w_sum += e.w;
			tree_edge_num++;
			if (tree_edge_num == n - 1)
				return;
			UNION(e.u, e.v);
		}
	}
	return;
}

int main() {
	cin >> n;

	if (n == 0) {
		cout << "0" << endl;
		return 0;
	}

	u = new int[n];
	for (int i = 0; i < n; i++)
		u[i] = i;
	//string str;
	int x, y;
	int w;
	while (scanf("%d %d %d", &x, &y, &w) != EOF) {
		if (x == -1) break;
		//q.push({ u, v, w });
		a.push_back({ x, y, w });
	}
	sort(a.begin(), a.end());
	/*getline(cin, str);
	while (getline(cin, str)) {
		if (str.size() == 0) break;
		istringstream ist(str);
		int u, v, w;
		ist >> u >> v >> w;
		q.push({ u, v, w });
	}*/

	Kruskal();
	cout << w_sum << endl;

	return 0;
}

/*
6
0 1 6
0 2 1
0 3 5
1 2 5
1 4 3
2 3 7
2 4 5
2 5 4
3 5 2
4 5 6
-1 -1 -1

0-2-1-4
  |
3-5

1+4+2+5+3

1

2
0 1 3

5
0 1 5
0 2 4
2 3 6
1 3 1
0 3 -1
1 4 9

9 + -1 + 1 + 4 = 13

0 - 1 - 4
| \ |
2 - 3

*/